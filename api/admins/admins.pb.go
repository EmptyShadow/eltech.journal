// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: admins.proto

package admins

import (
	context "context"
	fmt "fmt"
	domain "github.com/EmptyShadow/eltech.journal/api/domain"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateRequest struct {
	ContactInformation string `protobuf:"bytes,1,opt,name=ContactInformation,proto3" json:"ContactInformation,omitempty"`
}

func (m *CreateRequest) Reset()      { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage() {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{0}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetContactInformation() string {
	if m != nil {
		return m.ContactInformation
	}
	return ""
}

type CreateResponse struct {
	Profile *domain.Admin `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (m *CreateResponse) Reset()      { *m = CreateResponse{} }
func (*CreateResponse) ProtoMessage() {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{1}
}
func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetProfile() *domain.Admin {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ReadRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *ReadRequest) Reset()      { *m = ReadRequest{} }
func (*ReadRequest) ProtoMessage() {}
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{2}
}
func (m *ReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequest.Merge(m, src)
}
func (m *ReadRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequest proto.InternalMessageInfo

func (m *ReadRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type ReadResponse struct {
	Profile *domain.Admin `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (m *ReadResponse) Reset()      { *m = ReadResponse{} }
func (*ReadResponse) ProtoMessage() {}
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{3}
}
func (m *ReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResponse.Merge(m, src)
}
func (m *ReadResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResponse proto.InternalMessageInfo

func (m *ReadResponse) GetProfile() *domain.Admin {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ReadMyProfileResponse struct {
	Profile *domain.Admin `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (m *ReadMyProfileResponse) Reset()      { *m = ReadMyProfileResponse{} }
func (*ReadMyProfileResponse) ProtoMessage() {}
func (*ReadMyProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{4}
}
func (m *ReadMyProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadMyProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadMyProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadMyProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadMyProfileResponse.Merge(m, src)
}
func (m *ReadMyProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadMyProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadMyProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadMyProfileResponse proto.InternalMessageInfo

func (m *ReadMyProfileResponse) GetProfile() *domain.Admin {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UpdateRequest struct {
	Profile *domain.Admin `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (m *UpdateRequest) Reset()      { *m = UpdateRequest{} }
func (*UpdateRequest) ProtoMessage() {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{5}
}
func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetProfile() *domain.Admin {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ReadAllRequest struct {
	PageParams *domain.PageParams `protobuf:"bytes,1,opt,name=PageParams,proto3" json:"PageParams,omitempty"`
}

func (m *ReadAllRequest) Reset()      { *m = ReadAllRequest{} }
func (*ReadAllRequest) ProtoMessage() {}
func (*ReadAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{6}
}
func (m *ReadAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAllRequest.Merge(m, src)
}
func (m *ReadAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAllRequest proto.InternalMessageInfo

func (m *ReadAllRequest) GetPageParams() *domain.PageParams {
	if m != nil {
		return m.PageParams
	}
	return nil
}

type ReadAllResponse struct {
	Profiles []*domain.Admin `protobuf:"bytes,1,rep,name=Profiles,proto3" json:"Profiles,omitempty"`
}

func (m *ReadAllResponse) Reset()      { *m = ReadAllResponse{} }
func (*ReadAllResponse) ProtoMessage() {}
func (*ReadAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{7}
}
func (m *ReadAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAllResponse.Merge(m, src)
}
func (m *ReadAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAllResponse proto.InternalMessageInfo

func (m *ReadAllResponse) GetProfiles() []*domain.Admin {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type SwitchStatusToActiveRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *SwitchStatusToActiveRequest) Reset()      { *m = SwitchStatusToActiveRequest{} }
func (*SwitchStatusToActiveRequest) ProtoMessage() {}
func (*SwitchStatusToActiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{8}
}
func (m *SwitchStatusToActiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwitchStatusToActiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwitchStatusToActiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwitchStatusToActiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchStatusToActiveRequest.Merge(m, src)
}
func (m *SwitchStatusToActiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwitchStatusToActiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchStatusToActiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchStatusToActiveRequest proto.InternalMessageInfo

func (m *SwitchStatusToActiveRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type SwitchStatusToBlockedRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *SwitchStatusToBlockedRequest) Reset()      { *m = SwitchStatusToBlockedRequest{} }
func (*SwitchStatusToBlockedRequest) ProtoMessage() {}
func (*SwitchStatusToBlockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{9}
}
func (m *SwitchStatusToBlockedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwitchStatusToBlockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwitchStatusToBlockedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwitchStatusToBlockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchStatusToBlockedRequest.Merge(m, src)
}
func (m *SwitchStatusToBlockedRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwitchStatusToBlockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchStatusToBlockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchStatusToBlockedRequest proto.InternalMessageInfo

func (m *SwitchStatusToBlockedRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SwitchStatusToBlockedRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type DeleteRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{10}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type DeleteScopeRequest struct {
	UsersIDs []string `protobuf:"bytes,1,rep,name=UsersIDs,proto3" json:"UsersIDs,omitempty"`
}

func (m *DeleteScopeRequest) Reset()      { *m = DeleteScopeRequest{} }
func (*DeleteScopeRequest) ProtoMessage() {}
func (*DeleteScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8d09749e4ea8896, []int{11}
}
func (m *DeleteScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteScopeRequest.Merge(m, src)
}
func (m *DeleteScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteScopeRequest proto.InternalMessageInfo

func (m *DeleteScopeRequest) GetUsersIDs() []string {
	if m != nil {
		return m.UsersIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "github.com.EmptyShadow.eltech.journal.api.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "github.com.EmptyShadow.eltech.journal.api.CreateResponse")
	proto.RegisterType((*ReadRequest)(nil), "github.com.EmptyShadow.eltech.journal.api.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "github.com.EmptyShadow.eltech.journal.api.ReadResponse")
	proto.RegisterType((*ReadMyProfileResponse)(nil), "github.com.EmptyShadow.eltech.journal.api.ReadMyProfileResponse")
	proto.RegisterType((*UpdateRequest)(nil), "github.com.EmptyShadow.eltech.journal.api.UpdateRequest")
	proto.RegisterType((*ReadAllRequest)(nil), "github.com.EmptyShadow.eltech.journal.api.ReadAllRequest")
	proto.RegisterType((*ReadAllResponse)(nil), "github.com.EmptyShadow.eltech.journal.api.ReadAllResponse")
	proto.RegisterType((*SwitchStatusToActiveRequest)(nil), "github.com.EmptyShadow.eltech.journal.api.SwitchStatusToActiveRequest")
	proto.RegisterType((*SwitchStatusToBlockedRequest)(nil), "github.com.EmptyShadow.eltech.journal.api.SwitchStatusToBlockedRequest")
	proto.RegisterType((*DeleteRequest)(nil), "github.com.EmptyShadow.eltech.journal.api.DeleteRequest")
	proto.RegisterType((*DeleteScopeRequest)(nil), "github.com.EmptyShadow.eltech.journal.api.DeleteScopeRequest")
}

func init() { proto.RegisterFile("admins.proto", fileDescriptor_c8d09749e4ea8896) }

var fileDescriptor_c8d09749e4ea8896 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0xcf, 0x4f, 0xd4, 0x4e,
	0x14, 0xdf, 0x7e, 0xbf, 0xba, 0xc0, 0x83, 0x5d, 0xe2, 0x44, 0x08, 0x29, 0x66, 0x62, 0x9a, 0x18,
	0xf5, 0xd2, 0x12, 0x0c, 0x28, 0x26, 0x46, 0x17, 0x50, 0x83, 0xf1, 0x07, 0xe9, 0x8a, 0x87, 0xd5,
	0x44, 0x87, 0x76, 0x76, 0xb7, 0xda, 0x76, 0x6a, 0x3b, 0x0b, 0x72, 0x30, 0xe1, 0xec, 0xc9, 0x3f,
	0xc3, 0x3f, 0xc5, 0x83, 0x31, 0x1c, 0x39, 0x4a, 0xb9, 0x78, 0xe4, 0x4f, 0x30, 0xed, 0xb4, 0x4b,
	0x9b, 0x50, 0x97, 0x6e, 0x24, 0x1e, 0x3c, 0xce, 0xcc, 0x7b, 0x9f, 0xcf, 0xfb, 0xf1, 0x79, 0xaf,
	0x85, 0x09, 0x62, 0x3a, 0x96, 0x1b, 0xa8, 0x9e, 0xcf, 0x38, 0x43, 0xd7, 0x3b, 0x16, 0xef, 0xf6,
	0x36, 0x55, 0x83, 0x39, 0xea, 0x7d, 0xc7, 0xe3, 0x3b, 0xcd, 0x2e, 0x31, 0xd9, 0xb6, 0x4a, 0x6d,
	0x4e, 0x8d, 0xae, 0xfa, 0x96, 0xf5, 0x7c, 0x97, 0xd8, 0x2a, 0xf1, 0x2c, 0x79, 0xf1, 0xd8, 0x54,
	0xcb, 0x98, 0x6a, 0x79, 0x53, 0x8d, 0x78, 0x96, 0x66, 0x32, 0x87, 0x58, 0xae, 0xa0, 0x90, 0x67,
	0x3b, 0x8c, 0x75, 0x6c, 0xaa, 0xc5, 0xa7, 0xcd, 0x5e, 0x5b, 0xa3, 0x91, 0xb3, 0x78, 0x54, 0xee,
	0x42, 0x6d, 0xc5, 0xa7, 0x84, 0x53, 0x9d, 0xbe, 0xef, 0xd1, 0x80, 0x23, 0x15, 0xd0, 0x0a, 0x73,
	0x39, 0x31, 0xf8, 0x9a, 0xdb, 0x66, 0xbe, 0x43, 0xb8, 0xc5, 0xdc, 0x19, 0xe9, 0xb2, 0x74, 0x6d,
	0x4c, 0x3f, 0xe1, 0x45, 0x79, 0x05, 0xf5, 0x14, 0x20, 0xf0, 0x98, 0x1b, 0x50, 0xf4, 0x08, 0x46,
	0xd6, 0x7d, 0xd6, 0xb6, 0x6c, 0x1a, 0xbb, 0x8d, 0xcf, 0xcf, 0xa9, 0xa7, 0x4e, 0x52, 0x6d, 0x44,
	0xc5, 0xd1, 0x53, 0x00, 0xe5, 0x0a, 0x8c, 0xeb, 0x94, 0x98, 0x69, 0x70, 0xd3, 0x50, 0xdd, 0x08,
	0xa8, 0xbf, 0xb6, 0x9a, 0x04, 0x94, 0x9c, 0x94, 0x16, 0x4c, 0x08, 0xb3, 0x33, 0x08, 0xc1, 0x80,
	0xa9, 0x08, 0xfb, 0xc9, 0x4e, 0x72, 0x71, 0x26, 0x24, 0x2f, 0xa1, 0xb6, 0xe1, 0x99, 0x99, 0x36,
	0xfc, 0x49, 0xf0, 0x0e, 0xd4, 0xa3, 0x0c, 0x1a, 0xb6, 0x9d, 0xa2, 0x6f, 0x00, 0xac, 0x93, 0x0e,
	0x5d, 0x27, 0x3e, 0x71, 0x82, 0x84, 0x60, 0xa1, 0x04, 0xc1, 0xb1, 0xb3, 0x9e, 0x01, 0x52, 0x5e,
	0xc3, 0x64, 0x9f, 0x28, 0x29, 0xd2, 0x63, 0x18, 0x4d, 0xc2, 0x88, 0x78, 0xfe, 0x1f, 0x2a, 0x91,
	0x3e, 0x82, 0xb2, 0x00, 0xb3, 0xcd, 0x6d, 0x8b, 0x1b, 0xdd, 0x26, 0x27, 0xbc, 0x17, 0x3c, 0x67,
	0x0d, 0x83, 0x5b, 0x5b, 0x74, 0x90, 0x3c, 0x9e, 0xc2, 0xa5, 0xbc, 0xdb, 0xb2, 0xcd, 0x8c, 0x77,
	0x74, 0x90, 0xac, 0xa2, 0x7b, 0x9d, 0x92, 0x80, 0xb9, 0x33, 0xff, 0x89, 0x7b, 0x71, 0x52, 0xae,
	0x42, 0x6d, 0x95, 0xda, 0x94, 0x0f, 0x24, 0x9e, 0x03, 0x24, 0x0c, 0x9b, 0x06, 0xf3, 0xfa, 0xd6,
	0x32, 0x8c, 0x46, 0xef, 0xc1, 0xda, 0xaa, 0xa8, 0xc9, 0x98, 0xde, 0x3f, 0xcf, 0x7f, 0x3f, 0x0f,
	0xf5, 0x38, 0xeb, 0x20, 0x4d, 0x1a, 0x7d, 0x84, 0xaa, 0x98, 0x30, 0x74, 0xab, 0x44, 0xe9, 0x72,
	0x53, 0x2d, 0x2f, 0x0d, 0xe1, 0x99, 0x74, 0x70, 0x1b, 0xce, 0x45, 0x4d, 0x45, 0x8b, 0x25, 0x20,
	0x32, 0x33, 0x2b, 0xdf, 0x2c, 0xed, 0x97, 0x10, 0xef, 0x4a, 0x30, 0x92, 0xc8, 0x09, 0x2d, 0x95,
	0x04, 0x39, 0xd6, 0xba, 0x7c, 0x7b, 0x18, 0xd7, 0x24, 0x84, 0x37, 0x50, 0xcb, 0xcd, 0x3e, 0x9a,
	0x56, 0xc5, 0x32, 0x55, 0xd3, 0x65, 0x2a, 0x10, 0x87, 0x4f, 0xb2, 0x05, 0x55, 0x31, 0xf8, 0xa5,
	0x9a, 0x9b, 0xdb, 0x15, 0x72, 0x41, 0x50, 0xe8, 0x1e, 0xd4, 0x85, 0xec, 0xe3, 0x29, 0xb1, 0xf8,
	0x4e, 0x61, 0xf8, 0x45, 0x08, 0x0d, 0x98, 0x14, 0xfa, 0x1d, 0x5c, 0x81, 0x82, 0xfb, 0xf9, 0x6f,
	0x55, 0xa8, 0x09, 0x41, 0x47, 0x51, 0x30, 0x37, 0xf8, 0xa7, 0x05, 0xf5, 0x49, 0x82, 0x0b, 0xc9,
	0xdd, 0x33, 0xf7, 0x05, 0xb1, 0xad, 0xb8, 0xf5, 0x7f, 0x29, 0x98, 0x2d, 0xb8, 0x78, 0xd2, 0x36,
	0x45, 0x0f, 0x4a, 0x60, 0xfe, 0x66, 0x1d, 0x17, 0xaa, 0xea, 0x03, 0x4c, 0x9d, 0xb8, 0x8e, 0xd1,
	0xc3, 0xa1, 0x89, 0xf3, 0x0b, 0xbd, 0x90, 0xb9, 0x05, 0x55, 0xa1, 0xe7, 0x52, 0xd3, 0x96, 0xdb,
	0xf5, 0x85, 0xd8, 0x26, 0x8c, 0x67, 0x76, 0x3d, 0xba, 0x53, 0x9a, 0x20, 0xfb, 0x8d, 0x28, 0x62,
	0x59, 0x6e, 0xef, 0x1d, 0xe0, 0xca, 0xfe, 0x01, 0xae, 0x1c, 0x1d, 0x60, 0x69, 0x37, 0xc4, 0xd2,
	0x97, 0x10, 0x4b, 0x5f, 0x43, 0x2c, 0xed, 0x85, 0x58, 0xfa, 0x11, 0x62, 0xe9, 0x67, 0x88, 0x2b,
	0x47, 0x21, 0x96, 0x3e, 0x1f, 0xe2, 0xca, 0xde, 0x21, 0xae, 0xec, 0x1f, 0xe2, 0x4a, 0x6b, 0xee,
	0xf4, 0xbf, 0x8e, 0xe2, 0xef, 0x74, 0xb3, 0x1a, 0xf3, 0xde, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff,
	0x8e, 0xb1, 0x8f, 0x19, 0xae, 0x0a, 0x00, 0x00,
}

func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContactInformation != that1.ContactInformation {
		return false
	}
	return true
}
func (this *CreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateResponse)
	if !ok {
		that2, ok := that.(CreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *ReadRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadRequest)
	if !ok {
		that2, ok := that.(ReadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	return true
}
func (this *ReadResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadResponse)
	if !ok {
		that2, ok := that.(ReadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *ReadMyProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadMyProfileResponse)
	if !ok {
		that2, ok := that.(ReadMyProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *UpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateRequest)
	if !ok {
		that2, ok := that.(UpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *ReadAllRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadAllRequest)
	if !ok {
		that2, ok := that.(ReadAllRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PageParams.Equal(that1.PageParams) {
		return false
	}
	return true
}
func (this *ReadAllResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadAllResponse)
	if !ok {
		that2, ok := that.(ReadAllResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}
func (this *SwitchStatusToActiveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SwitchStatusToActiveRequest)
	if !ok {
		that2, ok := that.(SwitchStatusToActiveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	return true
}
func (this *SwitchStatusToBlockedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SwitchStatusToBlockedRequest)
	if !ok {
		that2, ok := that.(SwitchStatusToBlockedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	return true
}
func (this *DeleteScopeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteScopeRequest)
	if !ok {
		that2, ok := that.(DeleteScopeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UsersIDs) != len(that1.UsersIDs) {
		return false
	}
	for i := range this.UsersIDs {
		if this.UsersIDs[i] != that1.UsersIDs[i] {
			return false
		}
	}
	return true
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.CreateRequest{")
	s = append(s, "ContactInformation: "+fmt.Sprintf("%#v", this.ContactInformation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.CreateResponse{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.ReadRequest{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.ReadResponse{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadMyProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.ReadMyProfileResponse{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.UpdateRequest{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadAllRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.ReadAllRequest{")
	if this.PageParams != nil {
		s = append(s, "PageParams: "+fmt.Sprintf("%#v", this.PageParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadAllResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.ReadAllResponse{")
	if this.Profiles != nil {
		s = append(s, "Profiles: "+fmt.Sprintf("%#v", this.Profiles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SwitchStatusToActiveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.SwitchStatusToActiveRequest{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SwitchStatusToBlockedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&admins.SwitchStatusToBlockedRequest{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.DeleteRequest{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteScopeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&admins.DeleteScopeRequest{")
	s = append(s, "UsersIDs: "+fmt.Sprintf("%#v", this.UsersIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAdmins(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminsProfilesClient is the client API for AdminsProfiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminsProfilesClient interface {
	// Метод для создания профиля админа.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Метод для получения данных по активному профилю админа.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Метод для получения списка активных профилей.
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error)
	// Метод для получения данных профиля по токену доступа из заголовков.
	ReadMyProfile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadResponse, error)
	// Обновить профиль админа, который принадлежит пользователю чей токен доступа передан в заголовке.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Переключить статус профиля с ACTIVE на DISABLE и наоборот.
	SwitchActivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Удалить профиль.
	DeleteMyProfile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type adminsProfilesClient struct {
	cc *grpc.ClientConn
}

func NewAdminsProfilesClient(cc *grpc.ClientConn) AdminsProfilesClient {
	return &adminsProfilesClient{cc}
}

func (c *adminsProfilesClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsProfilesClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsProfilesClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error) {
	out := new(ReadAllResponse)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsProfilesClient) ReadMyProfile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/ReadMyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsProfilesClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsProfilesClient) SwitchActivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/SwitchActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsProfilesClient) DeleteMyProfile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/DeleteMyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminsProfilesServer is the server API for AdminsProfiles service.
type AdminsProfilesServer interface {
	// Метод для создания профиля админа.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Метод для получения данных по активному профилю админа.
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Метод для получения списка активных профилей.
	ReadAll(context.Context, *ReadAllRequest) (*ReadAllResponse, error)
	// Метод для получения данных профиля по токену доступа из заголовков.
	ReadMyProfile(context.Context, *empty.Empty) (*ReadResponse, error)
	// Обновить профиль админа, который принадлежит пользователю чей токен доступа передан в заголовке.
	Update(context.Context, *UpdateRequest) (*empty.Empty, error)
	// Переключить статус профиля с ACTIVE на DISABLE и наоборот.
	SwitchActivity(context.Context, *empty.Empty) (*empty.Empty, error)
	// Удалить профиль.
	DeleteMyProfile(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedAdminsProfilesServer can be embedded to have forward compatible implementations.
type UnimplementedAdminsProfilesServer struct {
}

func (*UnimplementedAdminsProfilesServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAdminsProfilesServer) Read(ctx context.Context, req *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedAdminsProfilesServer) ReadAll(ctx context.Context, req *ReadAllRequest) (*ReadAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (*UnimplementedAdminsProfilesServer) ReadMyProfile(ctx context.Context, req *empty.Empty) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMyProfile not implemented")
}
func (*UnimplementedAdminsProfilesServer) Update(ctx context.Context, req *UpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAdminsProfilesServer) SwitchActivity(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchActivity not implemented")
}
func (*UnimplementedAdminsProfilesServer) DeleteMyProfile(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyProfile not implemented")
}

func RegisterAdminsProfilesServer(s *grpc.Server, srv AdminsProfilesServer) {
	s.RegisterService(&_AdminsProfiles_serviceDesc, srv)
}

func _AdminsProfiles_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsProfilesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsProfilesServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsProfiles_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsProfilesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsProfilesServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsProfiles_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsProfilesServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsProfilesServer).ReadAll(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsProfiles_ReadMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsProfilesServer).ReadMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/ReadMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsProfilesServer).ReadMyProfile(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsProfiles_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsProfilesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsProfilesServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsProfiles_SwitchActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsProfilesServer).SwitchActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/SwitchActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsProfilesServer).SwitchActivity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsProfiles_DeleteMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsProfilesServer).DeleteMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsProfiles/DeleteMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsProfilesServer).DeleteMyProfile(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminsProfiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.EmptyShadow.eltech.journal.api.AdminsProfiles",
	HandlerType: (*AdminsProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AdminsProfiles_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AdminsProfiles_Read_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _AdminsProfiles_ReadAll_Handler,
		},
		{
			MethodName: "ReadMyProfile",
			Handler:    _AdminsProfiles_ReadMyProfile_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminsProfiles_Update_Handler,
		},
		{
			MethodName: "SwitchActivity",
			Handler:    _AdminsProfiles_SwitchActivity_Handler,
		},
		{
			MethodName: "DeleteMyProfile",
			Handler:    _AdminsProfiles_DeleteMyProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admins.proto",
}

// AdminsActionsClient is the client API for AdminsActions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminsActionsClient interface {
	// Метод для получения данных по любому профилю админа.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Метод для получения списка всех профилей.
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error)
	// Метод для получения новых профилей, которые должны быть провалидированны.
	// Доступен только для админов, у которых активный профиль.
	ReadAllOnValidate(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error)
	// Переключить статус профиля на ACTIVE, в случае если он находится на ON_VALIDATE.
	SwitchStatusToActive(ctx context.Context, in *SwitchStatusToActiveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Переключить статус профиля на BLOCKED, в случае если он находится на ACTIVE или ON_VALIDATE.
	SwitchStatusToBlocked(ctx context.Context, in *SwitchStatusToBlockedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Удалить один профиль.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Удалить массив профилей.
	DeleteScope(ctx context.Context, in *DeleteScopeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type adminsActionsClient struct {
	cc *grpc.ClientConn
}

func NewAdminsActionsClient(cc *grpc.ClientConn) AdminsActionsClient {
	return &adminsActionsClient{cc}
}

func (c *adminsActionsClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsActionsClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error) {
	out := new(ReadAllResponse)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsActionsClient) ReadAllOnValidate(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error) {
	out := new(ReadAllResponse)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/ReadAllOnValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsActionsClient) SwitchStatusToActive(ctx context.Context, in *SwitchStatusToActiveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/SwitchStatusToActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsActionsClient) SwitchStatusToBlocked(ctx context.Context, in *SwitchStatusToBlockedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/SwitchStatusToBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsActionsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsActionsClient) DeleteScope(ctx context.Context, in *DeleteScopeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/DeleteScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminsActionsServer is the server API for AdminsActions service.
type AdminsActionsServer interface {
	// Метод для получения данных по любому профилю админа.
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Метод для получения списка всех профилей.
	ReadAll(context.Context, *ReadAllRequest) (*ReadAllResponse, error)
	// Метод для получения новых профилей, которые должны быть провалидированны.
	// Доступен только для админов, у которых активный профиль.
	ReadAllOnValidate(context.Context, *ReadAllRequest) (*ReadAllResponse, error)
	// Переключить статус профиля на ACTIVE, в случае если он находится на ON_VALIDATE.
	SwitchStatusToActive(context.Context, *SwitchStatusToActiveRequest) (*empty.Empty, error)
	// Переключить статус профиля на BLOCKED, в случае если он находится на ACTIVE или ON_VALIDATE.
	SwitchStatusToBlocked(context.Context, *SwitchStatusToBlockedRequest) (*empty.Empty, error)
	// Удалить один профиль.
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	// Удалить массив профилей.
	DeleteScope(context.Context, *DeleteScopeRequest) (*empty.Empty, error)
}

// UnimplementedAdminsActionsServer can be embedded to have forward compatible implementations.
type UnimplementedAdminsActionsServer struct {
}

func (*UnimplementedAdminsActionsServer) Read(ctx context.Context, req *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedAdminsActionsServer) ReadAll(ctx context.Context, req *ReadAllRequest) (*ReadAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (*UnimplementedAdminsActionsServer) ReadAllOnValidate(ctx context.Context, req *ReadAllRequest) (*ReadAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllOnValidate not implemented")
}
func (*UnimplementedAdminsActionsServer) SwitchStatusToActive(ctx context.Context, req *SwitchStatusToActiveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchStatusToActive not implemented")
}
func (*UnimplementedAdminsActionsServer) SwitchStatusToBlocked(ctx context.Context, req *SwitchStatusToBlockedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchStatusToBlocked not implemented")
}
func (*UnimplementedAdminsActionsServer) Delete(ctx context.Context, req *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedAdminsActionsServer) DeleteScope(ctx context.Context, req *DeleteScopeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScope not implemented")
}

func RegisterAdminsActionsServer(s *grpc.Server, srv AdminsActionsServer) {
	s.RegisterService(&_AdminsActions_serviceDesc, srv)
}

func _AdminsActions_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsActionsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsActionsServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsActions_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsActionsServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsActionsServer).ReadAll(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsActions_ReadAllOnValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsActionsServer).ReadAllOnValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/ReadAllOnValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsActionsServer).ReadAllOnValidate(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsActions_SwitchStatusToActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchStatusToActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsActionsServer).SwitchStatusToActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/SwitchStatusToActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsActionsServer).SwitchStatusToActive(ctx, req.(*SwitchStatusToActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsActions_SwitchStatusToBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchStatusToBlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsActionsServer).SwitchStatusToBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/SwitchStatusToBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsActionsServer).SwitchStatusToBlocked(ctx, req.(*SwitchStatusToBlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsActions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsActionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsActionsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminsActions_DeleteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsActionsServer).DeleteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.EmptyShadow.eltech.journal.api.AdminsActions/DeleteScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsActionsServer).DeleteScope(ctx, req.(*DeleteScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminsActions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.EmptyShadow.eltech.journal.api.AdminsActions",
	HandlerType: (*AdminsActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _AdminsActions_Read_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _AdminsActions_ReadAll_Handler,
		},
		{
			MethodName: "ReadAllOnValidate",
			Handler:    _AdminsActions_ReadAllOnValidate_Handler,
		},
		{
			MethodName: "SwitchStatusToActive",
			Handler:    _AdminsActions_SwitchStatusToActive_Handler,
		},
		{
			MethodName: "SwitchStatusToBlocked",
			Handler:    _AdminsActions_SwitchStatusToBlocked_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminsActions_Delete_Handler,
		},
		{
			MethodName: "DeleteScope",
			Handler:    _AdminsActions_DeleteScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admins.proto",
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContactInformation) > 0 {
		i -= len(m.ContactInformation)
		copy(dAtA[i:], m.ContactInformation)
		i = encodeVarintAdmins(dAtA, i, uint64(len(m.ContactInformation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmins(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintAdmins(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmins(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadMyProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadMyProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadMyProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmins(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmins(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageParams != nil {
		{
			size, err := m.PageParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmins(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdmins(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SwitchStatusToActiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchStatusToActiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwitchStatusToActiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintAdmins(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwitchStatusToBlockedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchStatusToBlockedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwitchStatusToBlockedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintAdmins(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintAdmins(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintAdmins(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsersIDs) > 0 {
		for iNdEx := len(m.UsersIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UsersIDs[iNdEx])
			copy(dAtA[i:], m.UsersIDs[iNdEx])
			i = encodeVarintAdmins(dAtA, i, uint64(len(m.UsersIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdmins(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdmins(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactInformation)
	if l > 0 {
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *ReadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *ReadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *ReadMyProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *UpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *ReadAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageParams != nil {
		l = m.PageParams.Size()
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *ReadAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovAdmins(uint64(l))
		}
	}
	return n
}

func (m *SwitchStatusToActiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *SwitchStatusToBlockedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovAdmins(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovAdmins(uint64(l))
	}
	return n
}

func (m *DeleteScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UsersIDs) > 0 {
		for _, s := range m.UsersIDs {
			l = len(s)
			n += 1 + l + sovAdmins(uint64(l))
		}
	}
	return n
}

func sovAdmins(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdmins(x uint64) (n int) {
	return sovAdmins(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`ContactInformation:` + fmt.Sprintf("%v", this.ContactInformation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateResponse{`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "Admin", "domain.Admin", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadRequest{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadResponse{`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "Admin", "domain.Admin", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadMyProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadMyProfileResponse{`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "Admin", "domain.Admin", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateRequest{`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "Admin", "domain.Admin", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadAllRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadAllRequest{`,
		`PageParams:` + strings.Replace(fmt.Sprintf("%v", this.PageParams), "PageParams", "domain.PageParams", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadAllResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProfiles := "[]*Admin{"
	for _, f := range this.Profiles {
		repeatedStringForProfiles += strings.Replace(fmt.Sprintf("%v", f), "Admin", "domain.Admin", 1) + ","
	}
	repeatedStringForProfiles += "}"
	s := strings.Join([]string{`&ReadAllResponse{`,
		`Profiles:` + repeatedStringForProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *SwitchStatusToActiveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SwitchStatusToActiveRequest{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SwitchStatusToBlockedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SwitchStatusToBlockedRequest{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteScopeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteScopeRequest{`,
		`UsersIDs:` + fmt.Sprintf("%v", this.UsersIDs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAdmins(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInformation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInformation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &domain.Admin{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &domain.Admin{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadMyProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadMyProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadMyProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &domain.Admin{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &domain.Admin{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageParams == nil {
				m.PageParams = &domain.PageParams{}
			}
			if err := m.PageParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &domain.Admin{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchStatusToActiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchStatusToActiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchStatusToActiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchStatusToBlockedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchStatusToBlockedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchStatusToBlockedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmins
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmins
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersIDs = append(m.UsersIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmins(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmins
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmins(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmins
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmins
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmins
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdmins
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdmins
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdmins        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmins          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdmins = fmt.Errorf("proto: unexpected end of group")
)
